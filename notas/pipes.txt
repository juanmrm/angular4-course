Es una funcionalidad que permite tranformar output en un template.
No queremos modificar la propiedad que hay por debajo, pero si la forma en la que se muestra.

  p.e:
    <p>{{ username | uppercase }}</p>

 ------------- Built in Pipes ----------------------

   https://angular.io/api?query=pipe

  uppercase: pasar a mayusculas {{ server.instanceType | uppercase}} |
  date: mostrar en formato fecha {{ server.started | date }}

  -- Configurar la pipe

    Le pasaremos parametros con :param1:param2:paramX
      p.e: {{ server.started | date:'fullDate' }}

  -- Combinar pipes:

      El orden que se aplica es el definido de izquierda a derecha
        p.e {{ server.started | date:'fullDate' | uppercase}}

--------------- Creating a Custom Pipe -------------

  With the Cli: ng generate pipe name / ng g p name

  1 - Define the pipe:
    Añadir el decorator, implmentar el metodo transform

    import { Pipe, PipeTransform } from '@angular/core';

    @Pipe({
      name: 'shorten'
    })
    export class ShortenPipe implements PipeTransform {
      transform(value: string): string {
        if (value.length > 10) {
          return value.substring(0, 10) + ' ...';
        }
        return value;
      }
    }

    En el template: {{ server.name | shorten }}

  2 - Añadir la declaracion y el import en el app.module en la seccion declarations

  3 - Añadir opciones de parametrizar la pipe:

    @Pipe({
      name: 'shorten'
    })
    export class ShortenPipe implements PipeTransform {
      transform(value: string, limit: number): string {
        if (value.length > limit) {
          return value.substring(0, limit) + ' ...';
        }
        return value;
      }
    }

    En el template: {{ server.name | shorten:15 }}

  4 - Otro ejemplo, de un filtro

    *ngFor="let server of servers | filter:filteredStatus:'status'"

    @Pipe({
      name: 'filter'
    })
    export class FilterPipe implements PipeTransform {

      transform(value: any, filterString: string, propName: string): any {
        if (value.length === 0 || filterString === '') {
          return value;
        }
        const resultArray = [];
        for (const item of value) {
          if(item[propName] === filterString){
            resultArray.push(item);
          }
        }

        return resultArray;
      }
    }

    5 - Pure and Impure Pipe

      Cambiar el input del pipe provoca el recalculo del resultado.
      Cambiar los datos sobre los que se aplica la pipe no provocan el recalculo del resultado.

      Podemos forzar a que se recalcule el resultado del pipe (OJO!: vigilar performance, puede dar problemas)
        @Pipe({
          name: 'filter',
          pure: false
        })
