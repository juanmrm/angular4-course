SPA el server solo nos sirve 1 pagina que es el index.html

En index.html tenemos el app-root, no es una tag html, es un componente que ha sido generado por el CLI de Angular
y lo tenemos en src/app. En el app.component.ts tenemos la definicion (selector, template y styleUrls)

En el index.html final que nos proporciona el servidor se han incluido scripts que estan importados.

El primer codigo que se ejecuta es el que esta en main.ts
  platformBrowserDynamic().bootstrapModule(AppModule); // Start AppModule

index.html
  -> scripts in body
    -> main.ts (platformBrowserDynamic().bootstrapModule(AppModule);)
      -> app.module.ts (bootstrap: [AppComponent], indicamos la lista de componentes que debe conocer Angular cuando analiza el index.html)
        -> app.component.ts -> con esto index.html sabe como interpretar el app-root que aparecia

---------Modulos -----------

  Angular utiliza los componentes para contruir las paginas web
  Los modulos sirven para empaquetar / agrupar diferentes piezas, por ejemplo Components en paquetes (packages).

  @NgModule({ //Decorator, como lo es por ejemplo @Component
    declarations: [ //Registramos los componentes de nuestra App y a침adiremos el import correspondiente
      AppComponent
    ],
    imports: [ //importaciones de otros modulos que necesitemos
      BrowserModule,
      FormsModule,
      HttpModule
    ],
    providers: [],
    bootstrap: [AppComponent] //Le indica a Angular que componente tiene que reconocer cuando arranca la aplicacion, al analizar index.html
  })
  export class AppModule { }

------- Componentes --------

  Cada uno cuenta con su template, sus estilos, su l칩gica etc...

  AppComponent definido en app.component.ts es un componente especial (es el pricipal, root component)

  El resto de componentes se iran a침adiendo en  app.component.html NO en el index.html

  import { Component } from '@angular/core';

    @Component({
      selector: 'app-server',
      templateUrl: './server.component.html'
    })
    export class ServerComponent {}

-------- Crear Components usando el CLI -------

ng generate component servers -> ng g c servers (es una abreviatura)

-------- Styles for Components ---------

  - Por ejemplo usando clases de bootstrap en los html de los componentes
  - En el fichero xxxx.component.css
  - En el xxxx.component.ts Inline

------- Databinding (properties and events)--------

  - String Interpolation:
    {{ expression }} //expression debe retornar un String o un objeto que JS pase a String, puede ser un metodo, un texto, una propiedad etc...
    p.e: {{ 'Server' }}, {{ serverId }}, {{ getServerStatus() }}, <p> {{ allowNewServer }} </p>

  - Property Binding: binding de expresiones de typescript / javascript con atributos de los tags HTML
    <button type="button" [disabled] = "!allowNewServer">Add Server</button>
    <p [innerText] = "allowNewServer"></p>

  - Event binding: incorporar a los controles HTML funcionalidad de nuestro codigo
    p.e : para el evento onclick del bot칩n
      <button (click)="onCreateServer()">Add Server</button>

  - How do you know to which Properties or Events of HTML Elements you may bind?
    You can basically bind to all Properties and Events - a good idea is to console.log() the element you're interested in
    to see which properties and events it offers.
      p.e: var result = document.getElementsByTagName("p"); //recuperamos todos los p's del documento HTML y hacemos
        console.log(result) para explorarlos

  - Passing and using data with event binding:
    <input type="text" (input)="onUpdateServerName($event)"> //Con $event le estamos pasando el evento que se genera a nuestro metodo

    //En nuestro metodo
    onUpdateServerName(event: Event) {
      //console.log(event);
      this.serverName = (<HTMLInputElement>event.target).value; //Casting of the element to HTMLInputElement
    }
