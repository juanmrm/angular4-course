------------------------- JWT -----------------------------

    https://jwt.io/
    https://jwt.io/introduction/

    1 - For using Firebase SDK in our project: npm install --save firebase

        https://www.npmjs.com/package/firebase

    2 - Configure firebase in our project (config passed to firebase depends on our project, see in firebase console web)

        https://console.firebase.google.com/
        En nuestro proyecto, en Authentication -> Configuracion Web.

        import { Component, OnInit } from '@angular/core';
        import * as firebase from 'firebase';

        @Component({ 
            selector: 'app-root',
            templateUrl: './app.component.html',
            styleUrls: ['./app.component.css']
        })
        export class AppComponent implements OnInit {

            ngOnInit() {
                firebase.initializeApp({
                    apiKey: 'AIzaSyCnvu-FXntzar_20owRK6BFPCPvWFvzHcY',
                    authDomain: 'ng-recipe-book-46e95.firebaseapp.com',
                });
            }

        }

    3 - Make a service for manage Authentication and declare in providers section in app.module.ts

        import * as firebase from 'firebase';

        export class AuthService {

            token: string;

            signupUser(email: string, password: string) {
                firebase.auth().createUserWithEmailAndPassword(email, password)
                    .catch(
                        error => console.log(error)
                    );
            }

            signinUser(email: string, password: string) {
                firebase.auth().signInWithEmailAndPassword(email, password)
                    .then(
                        response => {
                            console.log(response);
                            firebase.auth().currentUser.getToken()
                                .then(
                                (token: string) => this.token = token
                                );
                        }
                    )
                    .catch (
                    error => console.log(error)
                    );
            }

            logout() {
                firebase.auth().signOut();
                this.token = null;
            }

            getToken() {
                firebase.auth().currentUser.getToken()
                    .then(
                        (token: string) => this.token = token
                    );
                return this.token;
            }

            isAuthenticated() {
                return this.token != null;
            }
        }


    4 - Cuando hacemos Login correctamente, se almacenan el LocalStorage los credenciales de acceso (uid, token, expiracion...)

        Auto Import

    5 - Sending the token in requests:

        p.e:    
            storeRecipes() {
                const token = this.authService.getToken();
                return this.http.put('https://ng-recipe-book-46e95.firebaseio.com/recipes.json?auth=' + token, this.recipeService.getRecipes());
            }
    6 - Route Protection and Redirection:

        Podemos crear un AuthGuard:

            @Injectable()
            export class AuthGuard implements CanActivate {

                constructor(private authService: AuthService) { }

                canActivate(_route: ActivatedRouteSnapshot, _state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
                    return this.authService.isAuthenticated();
                }

            }

    7 - Check LocalStorage manually:

        Por ejemplo se puede mirar si tenemos ya sesion en LocalStorage o sessionStorage, trabajar con este token inicialmente etc...

             const authUser = Object.keys(window.sessionStorage)
                .filter(item => item.startsWith('firebase:authUser'))[0];

            if (authUser) {
                console.log(authUser);
                const userInfo = JSON.parse(window.sessionStorage.getItem(authUser));
                console.log(userInfo);
            }
