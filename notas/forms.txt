Working with Forms in Angular:

- Asegurarse que en el app.module.ts esta importado el FormsModule (por defecto si es un proyecto creado con Angular CLI, deberia de estar).

2 Aproximaciones: Template Driven vs Reactive

------------------------------------------------------------------------
-------------------------- Template Driven -----------------------------

  Angular analiza el DOM y detecta el form tag como si fuese un selector, pero necesitamos indicarle a Angular que controles queremos tener registrados.
  (No va a analizar los controles del form automaticamente).

  1 - Pondremos ngModel en el control que queremos registrar.
      Importante poner tambien el atributo name, para indicar con qué nombre lo registramos.

      p.e:
        <input
          type="text"
          id="username"
          class="form-control"
          ngModel
          name='username'>

  2 - Indicar el submit del form (no el por defecto del HTLM)

      <form (ngSubmit)="onSubmit(f)" #f="ngForm"> // Asi es como indicamos a angular que queremos tener acceso a este objeto Javascript de angular
                                                     que representa el formulario (Se lo estamos pasando a nuestro metodo onSubmit del component).

  3 - Acceso al formulario en nuestro component

    import { NgForm } from '@angular/forms';

    3.1 - Primera forma: cuando hacemos el submit.

      onSubmit(form: NgForm) {
        ....
      }

    3.2 - Segunda forma: podemos tener acceso antes de hacer el submit (puede ser interesante)

      @ViewChild('f') signupForm: NgForm;
      onSubmit() {
        this.signupForm....
      }

  4 - Introducir validaciones

      Validadores: https://angular.io/api/forms/Validators

      required // Default HTML atribute, detectado por Angular y tenido en cuenta para calcular el estado global del formulario.
      email // Directiva de Angular, para validacion de un email.

  5 - Usando el estado del formulario

      5.1 Deshabilitar el boton de submit si el formulario tiene estado invalido
        <button
          class="btn btn-primary"
          type="submit"
          [disabled]="!f.valid">Submit // Using property binding
        </button>

      5.2 Trabajar con los estilos para señalar valores requeridos que faltan etc

        p.e: remarcar los inputs invalidos en rojo, pero no desde el principio, sino aquellos que ya se ha tocado (ng-touched)

        input.ng-invalid.ng-touched {
          border: 1px solid red;
        }

      5.3 Mostrar mensajes de error condicionales para los controles

        <input
          type="email"
          id="email"
          class="form-control"
          ngModel
          name="email"
          email
          #email="ngModel"> // Usar local reference y ngModel.
        <span class="help-block" *ngIf="!email.valid && email.touched">Please enter a valid email!</span> // Usando los estados del control

  6 - Asignar valores por defecto (One Way Binding)

      <select
        id="secret"
        class="form-control"
        [ngModel]="defaultQuestion" // En nuestro component tendremos por ejemplo defaultQuestion = 'pet'
        name="secret">
        <option value="pet">Your first Pet?</option>
        <option value="teacher">Your first teacher?</option>
      </select>

  7 - Usar ngModel en ambos sentidos (Two Way Databinding)

      Util cuando no solo queremos asignar valores por defecto sino que tambien queremos reaccionar ante cada cambio (en ambar direcciones)

      <div class="form-group">
        <textarea
          name="questionAnswer"
          rows="3"
          class="form-control"
          [(ngModel)]="answer">
        </textarea>
      </div>
      <p>Your reply: {{ answer }}</p> // answer es una propiedad de nuestro component

  8 - Agrupar controles (porque nos interese tener una estructura determinada para formularios complejos)

    p.e: <div
      id="user-data"
      ngModelGroup="userData"
      #userData="ngModelGroup">
      .... //Los controles que necesitemos
      </div>
      <p *ngIf="!userData.valid && userData.touched">User Data is invalid!</p> // Por ejemplo sacar un mensaje cuando el contenido del grupo es invalido.

  9 - Handling Radio Buttons

    <div class="radio" *ngFor="let gender of genders" >
      <label>
        <input
          type="radio"
          name="gender"
          ngModel
          [value]="gender"
          required>
        {{ gender }}
      </label>
    </div>

  9 - Establecer los valores del formulario desde codigo (Setting and Patching values)

    @ViewChild('f') signupForm: NgForm;

    // Todo el formulario
    this.signupForm.setValue({
      userData: {
        username: suggestedName,
        email: ''
      },
      secret: 'pet',
      questionAnswer: '',
      gender: 'male'
    });

    // Solo los elementos que nos interesa cambiar

    this.signupForm.form.patchValue({
      userData: {
        username: suggestedName
      }
    });

  10 - Using form Data

    p.e: tenemos un objeto user con esa estructura y vamos guardando los valores. Ademas nos guardamos un flag para saber cuando se ha enviado el formulario.
    onSubmit() {
      this.submitted = true;
      this.user.username = this.signupForm.value.userData.username;
      this.user.email = this.signupForm.value.userData.email;
      this.user.secretQuestion = this.signupForm.value.secret;
      this.user.answer = this.signupForm.value.questionAnswer;
      this.user.gender = this.signupForm.value.gender;
    }

  11 - Resetear formularios

    this.signupForm.reset();

  --------------------------------------------------------------------------
  -------------------------- Reactive Approach -----------------------------

  Se trata de crear el formulario programaticamente y engancharlo a nuestro template HTML

  1 - Setup:

    En app.module:
      //import { FormsModule } from '@angular/forms'; // Este se necesita para Template Driven Approach
      import { ReactiveFormsModule} from '@angular/forms';

      Incluir ReactiveFormsModule en imports.

  2 - Crear el formulario desde codigo.

      import { FormGroup, FormControl } from '@angular/forms';

      signupForm: FormGroup;

      this.signupForm = new FormGroup({
        'username': new FormControl(null),
        'email': new FormControl(null),
        'gender': new FormControl('male')
      });

  3 - Sincronizar nuestro Formulario con nuestro template HTML (engancharlo)

    3.1 Indicar a Angular no infiera el formGroup, que utilice el que le pasamos
      <form [formGroup]="signupForm">

    3.2 Indicar que controles tienen que conectarse con los inputs que tenemos en el html
    <input
      type="text"
      id="username"
      formControlName="username" // Tambien podemos usar property binding [formControlName]="'username'"
      class="form-control">

   4 - Submit del formulario
      Igual que el Template Driven Approach, pero ya no tenemos que utilizar local reference para pasarselo a nuestro
      metodo porque ya tenemos nuestro form en el component.

      <form [formGroup]="signupForm" (ngSubmit)="onSubmit()">

   5 - Incluir validaciones

       5.1 Configuramos los validadores para los controles definidos.

         this.signupForm = new FormGroup({
           'username': new FormControl(null, Validators.required),
           'email': new FormControl(null, [Validators.required, Validators.email]),
           'gender': new FormControl('male')
         });

        5.2 Mostrar mensajes de error para las validaciones

          Usamos .get(path)

          p.e: <span
                  *ngIf="!signupForm.get('email').valid && signupForm.get('email').touched"
                  class="help-block">Please enter a valid email!
                </span>

        5.3 Custom Validators

          5.3.1 - Creamos la funcion que decide si el control es o no valido:
            p.e:
              forbiddenNames(control: FormControl): {[s: string]: boolean} {
                  if (this.forbiddenUsernames.indexOf(control.value) !== -1) {
                    return {'nameIsForbidden': true};
                  }
                  return null; // Validation is successful, form control is valid
              }

            5.3.2 - Añadir el validador (OJO con el bind de Javascript que tenemos que hacer aqui para vincular nuestro scope this)

                this.signupForm = new FormGroup({
                  'username': new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)])
                });

            5.3.3 Usando el Error Code
              <span *ngIf="signupForm.get('userData.username').errors['nameIsForbidden']">This name is invalid</span>
              <span *ngIf="signupForm.get('userData.username').errors['required']">This field is invalid</span>

            5.3.4 Custom Asycn Validator

              p.e: un validador de email que comprueba que el email no sea 'test@test.com'

              forbiddenEmails(control: FormControl): Promise<any> | Observable<any> {
                const promise = new Promise<any>(
                  (resolve, reject) => {
                    setTimeout(() => {
                      if(control.value === 'test@test.com') {
                        resolve({'emailIsForbidden': true})
                      } else {
                        resolve(null);
                      }
                    }, 1500);
                  }
                );
                return promise;
              }

              Agregar el validador (OJO aqui no estamos haciendo el bind porque no usamos this en el validador, sino habria que hacerlo)

                this.signupForm = new FormGroup({
                  'email': new FormControl(null, [Validators.required, Validators.email], this.forbiddenEmails)
                });

     6 - Agrupar controles FormGroup

       this.signupForm = new FormGroup({
         'userData': new FormGroup({
           'username': new FormControl(null, Validators.required),
           'email': new FormControl(null, [Validators.required, Validators.email]),
         }),
         'gender': new FormControl('male')
       });

      En el template:

        <div formGroupName="userData">
          <div class="form-group">
            <input
              type="text"
              id="username"
              formControlName="username"
              class="form-control">
            <span
              *ngIf="!signupForm.get('userData.username').valid && signupForm.get('userData.username').touched"
              class="help-block">Please enter a valid username!</span>
          </div>
        </div>

      7 - Arrays of Forms Controls (FormArray)

        Se trata de añadir dinamicamente controles a nuestro forumlario

        7.1 En el component:

          import { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';

          this.signupForm = new FormGroup({
            'hobbies': new FormArray([])
          });

          onAddHobby() {
            const control = new FormControl(null, Validators.required);
            (<FormArray>this.signupForm.get('hobbies')).push(control);
          }

        7.2 En el template (formArrayName)

          <div formArrayName="hobbies">
            <h4>Your Hobbies</h4>
            <button
              class="btn btn-default"
              type="button"
              (click)="onAddHobby()">Add Hobby
            </button>
            <div
              class="form-group"
              *ngFor="let hobbyControl of signupForm.get('hobbies').controls; let i = index">
              <input type="text" class="form-control" [formControlName]="i">
            </div>
          </div>

      8 - Reaccionar antes cambios de estados o cambios de valores

        this.signupForm.valueChanges.subscribe(
          (value) => {
            console.log(value);
          }
        );
        this.signupForm.statusChanges.subscribe(
          (value) => {
            console.log(value);
          }
        );

      9 - Establecer los valores del formulario desde codigo (Setting and Patching values)

        Igual que en  Template Driven Approach

      10 - Resetear formularios

        Igual que en  Template Driven Approach
