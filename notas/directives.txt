-------------------- Directives -------------------------------

  Todas las directivas: https://angular.io/api?type=directive

  Las directivas son instrucciones en el DOM.

  Los componentes que creamos al final funcionan como directivas, pero tambien hay built-in directives y podemos definir las nuestras.

  ---------------------------
  BUILT-IN DIRECTIVES:
  ---------------------------

  - STRUCTURAL Directives (empiezan por *): cambian el DOM añadiendo / borrando elementos. No son elementos hidden.
        Ojo: no podemos tener dos directivas estructurales en el mismo elemento.

    - *ngIf: conditional if. Podemos añadir un else y usar otra directiva.
      p.e: <p *ngIf="serverCreated; else noServer">Server was created. My server name is {{ serverName }}</p>

            <ng-template #noServer>
              <p>No server was created!</p>
            </ng-template

            Otro ejemplo:
              

    - *ngFor: repeating an element (tracking the index in i)
      p.e: <app-server *ngFor="let server of servers; let i=index" ></app-server>

    - ngSwitch: adds / removes DOM sub-trees when the nest match expressions matches the switch expression.
      p.e:
            <div ngSwitch="value">
              <p *ngSwitchCase="5">Value is 5</p>
              <p *ngSwitchCase="10">Value is 10</p>
              <p *ngSwitchCase="100">Value is 100</p>
              <p *ngSwitchDefault>Value is Default</p>
            </div>

  - ATTRIBUTE Directives: no añaden / borran elementos. Solo cambian el estado del elemento donde se pone la directiva.

    - ngStyle: cambiar los estilos dinamicos
      p.e: <p [ngStyle]="{backgroundColor: getColor()}">{{ 'Server' }} with ID {{ serverId }} is {{ getServerStatus() }}</p>
                          //Dentro de {} ponemos typescript expressions

    -ngClass: añadir o quitar clases de estilos dinamicamente.
      p.e: [ngClass]="{online: serverStatus === 'online'}">{{ 'Server' }} with ID {{ serverId }} is {{ getServerStatus() }}
         Tambien funciona con ngClass, sin [] = "{ online: serverStatus === 'online' }"

 ---------------------------
 CUSTOM DIRECTIVES:
 ---------------------------

    El selector debe ser único en la aplicacion.

    Este nuevo componente tiene que darse de alta en app.module.ts

    p.e: una directiva basica que pone el fondo del elemeto a verde. En el template html usaremos appHighlight sin []

     ------- Accessing the DOM directly (puede fallar en algunos casos muy particulares, service workers) -------------

     @Directive({
       selector: '[appHighlight]'
     })
     export class BasicHighlightDirective implements OnInit {

       constructor(private elementRef: ElementRef) { }

       ngOnInit(): void {
         this.elementRef.nativeElement.style.backgroundColor = 'green';
       }
     }

     ------- Using the Renderer (mejor solucion( -----------

     @Directive({
       selector: '[appBetterHighlight]'
     })
     export class BetterHighlightDirective implements OnInit {

       constructor(private elRef: ElementRef, private renderer: Renderer2) { }

       ngOnInit(): void {
         this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
       }
     }

  -------- Crear Directivas usando el CLI -------

  ng generate directive mydirective
  ng g d mydirective (es una abreviatura)

  -------- Utilizar HostListener para escuchar eventos del elemento --------

     Reaccionar ante determinados eventos de nuestro elemento html, donde tenemos puesta la directiva.

     @HostListener('mouseenter') mouseover(eventData: Event) {
        this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
      }

  --------- Utilizar HostBinding para engancharse con propiedades del elemento -------

    Enlazarnos directamente con determinadas propiedades de nuestro elemento html.

    @HostBinding('style.backgroundColor') backgroundColor: string = 'transparent';

  -------- Utilizar Input para pasar parametros de entrada a la directiva ------------
    @Directive({
        selector: '[appBetterHighlight]'
     })
    export class BetterHighlightDirective {
        @Input() defaultColor: string = 'transparent';
        @Input('appBetterHighlight') highlightColor: string = 'blue'; //

    En el html:
        <p appBetterHighlight [defaultColor] = "'yellow'" [highlightColor] = "'red" >Style me with a better directive.</p>

        <p [appBetterHighlight]="'red'" defaultColor = "yellow">Style me with a better directive.</p> //Es equivalente al de arriba

    ----------- Creacion de directivas estructurales ----------------

        p.e: una directiva que elimina / muestra el elemento solo si el parametro boleano de entrada es true.

            @Directive({
              selector: '[appUnless]'
            })
            export class UnlessDirective {
              @Input() set appUnless(condition: boolean) {
                if (!condition) {
                  this.vcRef.createEmbeddedView(this.templateRef);
                } else {
                  this.vcRef.clear();
                }
              }

              constructor(private templateRef: TemplateRef<any>, private vcRef: ViewContainerRef) { }

            }