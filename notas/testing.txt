    https://angular.io/guide/testing
    https://semaphoreci.com/community/tutorials/testing-components-in-angular-2-with-jasmine
    https://github.com/angular/angular-cli#running-unit-tests
    https://github.com/angular/angular-cli#running-end-to-end-tests



-------------------- Unit testing -------------------

    Paquete proporcionado por angular: '@angular/core/testing'

    El tipico Test Runner es Karma / Jasmine... (paquete que instalamos y ejecuta nuestros tests).

    1 - Orden de Ejecucion: 

        1.1 - Se ejecuta el beforeEach antes de cada bloque.
            Aqui declararemos lo que necesitamos

            beforeEach(() => {
                TestBed.configureTestingModule({
                declarations: [
                    AppComponent
                ],
                });
            });

        2.1 - Se ejecuta cada bloque it:

              it('should render title in a h1 tag', async(() => {
                    let fixture = TestBed.createComponent(AppComponent);
                    fixture.detectChanges();
                    let compiled = fixture.debugElement.nativeElement;
                    expect(compiled.querySelector('h1').textContent).toContain('app works!');
                }));

    2 - Ejecutar los test con el CLI

        ng test
        ng test --sourcemaps=false // Will not fail Karma silently but give you some detail about the error instead.

    3 - Simulating Async Tasks

        Hacer uso de async, spyOn, whenStable...

        it('should fetch data successfully if not called asynchronously', async(() => {
            const fixture = TestBed.createComponent(UserComponent);
            const component = fixture.componentInstance;
            const dataService = fixture.debugElement.injector.get(DataService);
            const spy = spyOn(dataService, 'getDetails')
            .and.returnValue(Promise.resolve('Data'));
            fixture.detectChanges();
            fixture.whenStable().then(() => {
                expect(component.data).toBe('Data');
            });
        }));

    4 - Use fakeAsync and tick

        fakeAsync, tick

        Podemos eliminar el whenStable y usar tick.

          it('shouldn fetch data successfully if not called asynchronously', fakeAsync(() => {
            const fixture = TestBed.createComponent(UserComponent);
            const component = fixture.componentInstance;
            const dataService = fixture.debugElement.injector.get(DataService);
            const spy = spyOn(dataService, 'getDetails')
            .and.returnValue(Promise.resolve('Data'));
            fixture.detectChanges();
            tick(); // In a fake asynchronously environment -> finish all asynchronous task immediately
            expect(component.data).toBe('Data');
        }));

    5 - Isolated vs Non Isolated Test

        Isolated: ver test reverse.pipe.spec.ts -> IMPOTANTE: aqui no necesitamos modulos / herrameintas complementarias del core de angular
                                                              para testing, por eso este test estÃ¡ aislado completamente.

            import { ReversePipe } from './reverse.pipe';
                describe('Pipe: Reverse', () => {

                it('should reverse the text', () => {
                    const reversePipe = new ReversePipe();
                    expect(reversePipe.transform('hello')).toEqual('olleh');
                });

            });


